SET JAVA_HOME=C:\devtools\jdk1.8.0_66
SET MAVEN_HOME=C:\apache-maven-3.0.5
SET PATH=C:\devtools\jdk1.8.0_66\bin;C:\apache-maven-3.0.5\bin;%PATH%;C:\devtools\node-v8.9.2-win-x64\node-v8.9.2-win-x64
SET PATH=%PATH%;C:\Program Files\Heroku\bin;.

Connect to DB (Created/Can't connect from machine/Offline Connected using pgAdmin)

set HTTPS_PROXY=http://webcache.comp.pge.com:8080
set HTTP_PROXY=http://webcache.comp.pge.com:8080

heroku login --sso
git init
git add .
git commit -m "rapidtest springboot"
heroku apps:create rapidtest1 --team ccoe --space ccoesandbox
git push origin master

heroku local web (http://localhost:5000/swagger-ui.html)
heroku open (http://rapidtest1.herokuapp.com/swagger-ui.html)
heroku logs
heroku ps

heroku addons
heroku info (Check Which Region)

set HTTPS_PROXY=http://webcache.comp.pge.com:8080
set HTTP_PROXY=http://webcache.comp.pge.com:8080

Heroku Postgres Database
heroku addons:create heroku-postgresql
heroku config (SET all sensitive information as variables) and then add  password: ${ADMIN_PASSWORD} under application.yml
heroku pg (Database info)

Heroku Caching
Storing sessions in-memory prohibits disposability and horizontal scalability of dynos. 
That’s why it’s important to use a distributed session store like Redis for server side session caching (login state; shopping cart)
https://devcenter.heroku.com/articles/java-session-handling-on-heroku

heroku addons:create heroku-redis
web: java -jar target/rapidtest-1.0.0.jar --session-store redis target/myapp.war

Heroku JVM Runtime Matrics
The JVM Runtime Metrics feature allows you to view heap and non-heap memory, as well as garbage collection activity, for any app that runs inside of the Java Virtual Machine (JVM). 

heroku labs:enable "runtime-heroku-metrics" -a "my-app-name"
git commit --allow-empty -m "Enable Heroku Metrics"
git push heroku master

heroku labs:disable "runtime-heroku-metrics" -a "my-app-name"
git commit --allow-empty -m "Enable Heroku Metrics"
git push heroku master

Configure error/maintenance page ON
https://devcenter.heroku.com/articles/preparing-a-spring-boot-app-for-production-on-heroku#configure-error-and-maintenance-pages

Attach logging addon
heroku addons:create papertrail

Detail error/stack traces of errors
heroku addons:create rollbar

Security Vulnerability
heroku addons:create snyk
heroku addons:create snyk --app YOUR_APP_NAME_HERE
heroku addons:destroy snyk

====AWS

Elastic Beanstalk
EC2-Manual

C:\devtools\Putty>pscp -i c:/devtools/aws_keys/pts6testing.pem c:/projects/rapidtest/target/rapidtest-1.0.0.jar ec2-user@18.208.149.83:/home/ec2-user

sudo su
yum remove java-1.7.0-openjdk -y
yum install java-1.8.0
sudo alternatives --config java
Select Option: 1

Add Custom TCP Rule (INBOUND Rule - Allow 8080 port)
http://18.208.149.83:8080/swagger-ui.html

use http://www.yamllint.com/ (validate yaml file)
https://docs.aws.amazon.com/codebuild/latest/userguide/getting-started.html

Created SNS/Subscribe by email to approve deployment!!

